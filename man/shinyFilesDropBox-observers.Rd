% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filechoose.R, R/dirchoose.R, R/filesave.R
\name{shinyFilesDropBox-observers}
\alias{shinyFilesDropBox-observers}
\alias{shinyDropFileChoose}
\alias{shinyDropDirChoose}
\alias{shinyDropFileSave}
\title{Create a connection to the server side filesystem}
\usage{
shinyDropFileChoose(input, id, updateFreq = 20000,
  session = getDropSession(), defaultRoot = NULL, defaultPath = "",
  dtoken, ...)

shinyDropDirChoose(input, id, updateFreq = 20000,
  session = getDropSession(), defaultPath = "", defaultRoot = NULL,
  dtoken, ...)

shinyDropFileSave(input, id, updateFreq = 20000, session = getDropSession(),
  defaultPath = "", defaultRoot = NULL, dtoken, ...)
}
\arguments{
\item{input}{The input object of the \code{shinyServer()} call (usaully 
\code{input})}

\item{id}{The same ID as used in the matching call to 
\code{shinyDropFilesButton} or as the id attribute of the button, in case of a
manually defined html. This id will also define the id of the file choice in 
the input variable}

\item{updateFreq}{The time in milliseconds between file system lookups. This
determines the responsiveness to changes in the filesystem (e.g. addition of
files or drives)}

\item{session}{The session object of the shinyServer call (usually 
\code{session}).}

\item{defaultRoot}{The default root to use. For instance if 
\code{roots = c(Home = '', Home2='/home')} then \code{defaultRoot}
can be either \code{'Home'} or \code{'Home2'}.}

\item{defaultPath}{The default relative path specified given the \code{defaultRoot}.}

\item{dtoken}{The Dropbox token generated by drop_auth (package rdrop2).}

\item{...}{Arguments to be passed on to \code{\link{fileGetterFile}} or 
\code{\link{dirDropGetter}}}
}
\value{
A reactive observer that takes care of the server side logic of the 
filesystem connection.
}
\description{
These function sets up the required connection to the client in order for the 
user to navigate the filesystem. For this to work a matching button should be
present in the html, either by using one of the button generating functions 
or adding it manually. See \code{\link{shinyFiles-buttons}} for more details.
}
\details{
Restrictions on the access rights of the client can be given in several ways.
The root parameter specifies the starting position for the filesystem as 
presented to the client. This means that the client can only navigate in
subdirectories of the root. Paths passed of to the \code{restrictions} 
parameter will not show up in the client view, and it is impossible to 
navigate into these subdirectories. The \code{filetypes} parameter takes a 
vector of file extensions to filter the output on, so that the client is 
only presented with these filetypes. Whenever a file or folder 
choice is made the resulting files/folder will be accessible in the input 
variable with the id given in the parameters. This value should probable be 
run through a call to one of the parser (\code{\link{shinyDropFiles-parsers}}) in 
order to get well formatted paths to work with.
}
\examples{
\dontrun{
# File selections
token = drop_auth(new_user = FALSE, cache=TRUE)
ui <- shinyUI(bootstrapPage(
    shinyDropFilesButton('files', 'File select', 'Please select a file', FALSE)
))
server <- shinyServer(function(input, output,session) {
    shinyDropFileChoose(input, 'files',session = session, dtoken =token)
})

runApp(list(
    ui=ui,
    server=server
))
}

\dontrun{
# Folder selections
token = drop_auth(new_user = FALSE, cache=TRUE)
ui <- shinyUI(bootstrapPage(
shinyDropDirButton('folder', 'Folder select', 'Please select a folder', FALSE),
verbatimTextOutput('rawInputValue'),
verbatimTextOutput('filepaths')
))
server <- shinyServer(function(input, output,session) {

shinyDropDirChoose(input, 'folder', session = session,dtoken=token)
output$rawInputValue <- renderPrint({str(input$folder)})
output$filepaths <- renderPrint({parseDropDirPath(input$folder)})
})
runApp(list(
    ui=ui,
    server=server
))
}

\dontrun{
# File selections
token = drop_auth(new_user = FALSE, cache=TRUE)
ui <- shinyUI(bootstrapPage(
    shinyDropSaveButton('save', 'Save', 'Save as...'),
    verbatimTextOutput('rawInputValue'),
    verbatimTextOutput('filepaths')
))
server <- shinyServer(function(input, output, session) {
    shinyDropFileSave(input, 'save',session=session,dtoken=token)
    output$rawInputValue <- renderPrint({str(input$save)})
    output$filepaths <- renderPrint({parseDropSavePath(input$save)})
})

runApp(list(
    ui=ui,
    server=server
))
}

}
\seealso{
Other shinyFilesDropBox: \code{\link{shinyDropFilesExample}},
  \code{\link{shinyFilesDropBox-buttons}},
  \code{\link{shinyFilesDropBox-parsers}}
}
